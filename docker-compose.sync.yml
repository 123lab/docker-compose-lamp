version: "3.5"

services:
################ Web Stack.
    php-fpm:
        # Pls, check image tags, latest is php-7, but we have php-5 too.
        # build: docker/images/php-fpm/.
        image: akhomy/alpine-php-fpm:${PHP_FPM_TAG}
        # image: akhomy/alpine-php-fpm:php-5
        # image: akhomy/alpine-php-fpm:php-7
        # image: akhomy/alpine-php-fpm:php-7.1
        # image: akhomy/alpine-php-fpm:php-7.0
        container_name: "${PROJECT_NAME}-php-fpm"
        volumes:
            - ./docker/compose/crontasks.txt:/home/crontasks.txt
            - web:${PHP_FPM_ROOT}:cached
            - web-docker-sync:${PHP_FPM_ROOT}:nocopy
            # Attaches sample configs if necessary.
            - ${PHP_TEMP_CONFIGS}
        environment:
            USE_ONLY_CONFIGS: ${PHP_USE_ONLY_CONFIGS}
            LINES: ${PHP_LINES}
            COLUMNS: ${PHP_COLUMNS}
            PHP_OPCACHE_ENABLE: ${PHP_OPCACHE_ENABLE}
            DRUSH_VERSION: ${PHP_DRUSH_VERSION}
            PHP_SHOW_ERRORS: ${PHP_SHOW_ERRORS}
            CRONTAB_ENABLED: ${PHP_CRONTAB_ENABLED}
            PHP_FPM_PORT: ${PHP_FPM_PORT}
            PHP_SENDMAIL_PATH: ${PHP_SENDMAIL_PATH}
            PHP_SENDMAIL_HOST: ${PHP_SENDMAIL_HOST}
            PHP_SENDMAIL_PORT: ${PHP_SENDMAIL_PORT}
            PHP_XDEBUG_ENABLED: ${PHP_XDEBUG_ENABLED}
            PHP_XDEBUG_PORT: ${PHP_XDEBUG_PORT}
            PHP_MAX_EXECUTION_TIME: ${PHP_MAX_EXECUTION_TIME}
            PHP_UPLOAD_MAX_FILESIZE: ${PHP_UPLOAD_MAX_FILESIZE}
            PHP_POST_MAX_SIZE: ${PHP_POST_MAX_SIZE}
            PHP_ALLOW_URL_FOPEN: ${PHP_ALLOW_URL_FOPEN}
            PHP_ALWAYS_POPULATE_RAW_POST_DATA: ${PHP_ALWAYS_POPULATE_RAW_POST_DATA}
            PHP_SHORT_OPEN_TAG: ${PHP_SHORT_OPEN_TAG}
            PHP_MEMORY_LIMIT: ${PHP_MEMORY_LIMIT}
        networks:
            internal: {}
            shared:
                aliases:
                - ${PHP_FPM_SHARED_NETWORK_ALIAS}

    apache-mpm:
        image: akhomy/alpine-apache:${APACHE_TAG}
        volumes:
            - web:${APACHE_DOCUMENT_ROOT}:cached
            - web-docker-sync:${APACHE_DOCUMENT_ROOT}:nocopy
            # Attaches sample configs if necessary.
            - ${APACHE_TEMP_CONFIGS}
        labels:
        - "traefik.docker.network=${PROJECT_NAME}"
        - "traefik.enable=true"
        - "traefik.port=${APACHE_TRAEFIK_PORT}"
        - "traefik.protocol=${APACHE_TRAEFIK_PROTOCOL}"
        - "traefik.frontend.rule=Host:${APACHE_MPM_TRAEFIK_HOST}"
        environment:
            USE_ONLY_CONFIGS: ${APACHE_USE_ONLY_CONFIGS}
            APACHE_TIMEOUT: ${APACHE_TIMEOUT}
            DOCUMENT_ROOT: ${APACHE_DOCUMENT_ROOT}
            PROXY_PASS: ${APACHE_PROXY_PASS}
            APACHE_LISTEN_PORT: ${APACHE_LISTEN_PORT}
        networks:
            internal: {}
            shared:
                aliases:
                - ${APACHE_MPM_SHARED_NETWORK_ALIAS}

    nginx:
        image: akhomy/alpine-nginx:${NGINX_TAG}
        volumes:
            - web:${NGINX_SERVER_ROOT}:cached
            - web-docker-sync:${NGINX_SERVER_ROOT}:nocopy
        # Attach sample configs if necessary.
            - ${NGINX_TEMP_CONFIGS}
        labels:
        - "traefik.docker.network=${PROJECT_NAME}"
        - "traefik.enable=true"
        - "traefik.port=${NGINX_TRAEFIK_PORT}"
        - "traefik.protocol=${NGINX_TRAEFIK_PROTOCOL}"
        - "traefik.frontend.rule=Host:${NGINX_TRAEFIK_HOST}"
        environment:
            USE_ONLY_CONFIGS: ${NGINX_USE_ONLY_CONFIGS}
            KEEPALIVE_TIMEOUT: ${NGINX_KEEPALIVE_TIMEOUT}
            FASTCGI_READ_TIMEOUT: ${NGINX_FASTCGI_READ_TIMEOUT}
            LISTEN_PORT: ${NGINX_LISTEN_PORT}
            LISTEN_SSL_PORT: ${NGINX_LISTEN_SSL_PORT}
            SERVER_ROOT: ${NGINX_SERVER_ROOT}
            SERVER_NAME: ${NGINX_SERVER_NAME}
            CLIENT_MAX_BODY_SIZE: ${NGINX_CLIENT_MAX_BODY_SIZE}
            PROXY_CONNECT_TIMEOUT: ${NGINX_PROXY_CONNECT_TIMEOUT}
            PROXY_SEND_TIMEOUT: ${NGINX_PROXY_SEND_TIMEOUT}
            PROXY_READ_TIMEOUT: ${NGINX_PROXY_READ_TIMEOUT}
            SEND_TIMEOUT: ${NGINX_SEND_TIMEOUT}
            FASTCGI_BUFFERS: ${NGINX_FASTCGI_BUFFERS}
            FASTCGI_BUFFER_SIZE: ${NGINX_FASTCGI_BUFFER_SIZE}
            PROXY_BUFFER_SIZE: ${NGINX_PROXY_BUFFER_SIZE}
            PROXY_BUFFERS: ${NGINX_PROXY_BUFFERS}
            PROXY_BUSY_BUFFER_SIZE: ${NGINX_PROXY_BUSY_BUFFER_SIZE}
            OPENSSL_ARGS: ${NGINX_OPENSSL_ARGS}
            PROXY_PASS: ${NGINX_PROXY_PASS}
        networks:
            internal: {}
            shared:
                aliases:
                - ${NGINX_SHARED_NETWORK_ALIAS}

    varnish:
        image: akhomy/alpine-varnish:${VARNISH_TAG}
        labels:
        - "traefik.docker.network=${PROJECT_NAME}"
        - "traefik.enable=true"
        - "traefik.port=${VARNISH_TRAEFIK_PORT}"
        - "traefik.protocol=${VARNISH_TRAEFIK_PROTOCOL}"
        - "traefik.frontend.rule=Host:${VARNISH_TRAEFIK_HOST}"
        environment:
            DEBUG: ${VARNISH_DEBUG}
            VARNISH_BACKEND_HOST: ${VARNISH_BACKEND_HOST}
            VARNISH_BACKEND_PORT: ${VARNISH_BACKEND_PORT}
            VARNISH_CONFIG_PRESET: ${VARNISH_CONFIG_PRESET}
            VARNISH_PURGE_KEY: ${VARNISH_PURGE_KEY}
            VARNISH_SECRET: ${VARNISH_SECRET}
            VARNISH_ALLOW_UNRESTRICTED_PURGE: ${VARNISH_ALLOW_UNRESTRICTED_PURGE}
            VARNISH_BACKEND_BETWEEN_BYTES_TIMEOUT: ${VARNISH_BACKEND_BETWEEN_BYTES_TIMEOUT}
            VARNISH_BACKEND_CONNECT_TIMEOUT: ${VARNISH_BACKEND_CONNECT_TIMEOUT}
            VARNISH_BACKEND_FIRST_BYTE_TIMEOUT: ${VARNISH_BACKEND_FIRST_BYTE_TIMEOUT}
            VARNISHD_PARAM_CONNECT_TIMEOUT: ${VARNISHD_PARAM_CONNECT_TIMEOUT}
        expose:
        - 6081
        - 6082
        - 9131
        networks:
            internal: {}
            shared:
                aliases:
                - ${VARNISH_SHARED_NETWORK_ALIAS}

################ Toolkit images.
    mailhog:
        image: mailhog/mailhog:${MAILHOG_TAG}
        labels:
        - "traefik.docker.network=${PROJECT_NAME}"
        - "traefik.enable=true"
        - "traefik.port=${MAILHOG_TRAEFIK_PORT}"
        - "traefik.protocol=${MAILHOG_TRAEFIK_PROTOCOL}"
        - "traefik.frontend.rule=Host:${MAILHOG_TRAEFIK_HOST}"
        networks:
            internal: {}
            shared:
                aliases:
                - ${MAILHOG_SHARED_NETWORK_ALIAS}

    ngrok:
        image: akhomy/alpine-ngrok:${NGROK_TAG}
        labels:
        - "traefik.docker.network=${PROJECT_NAME}"
        - "traefik.enable=true"
        - "traefik.port=${NGROK_TRAEFIK_PORT}"
        - "traefik.protocol=${NGROK_TRAEFIK_PROTOCOL}"
        - "traefik.frontend.rule=Host:${NGROK_TRAEFIK_HOST}"
        environment:
            ARGS: ${NGROK_ARGS}
        networks:
            internal: {}
            shared:
                aliases:
                - ${NGROK_SHARED_NETWORK_ALIAS}

    solr:
        image: solr:${SOLR_TAG}
        labels:
        - "traefik.docker.network=${PROJECT_NAME}"
        - "traefik.enable=true"
        - "traefik.port=${SOLR_TRAEFIK_PORT}"
        - "traefik.protocol=${SOLR_TRAEFIK_PROTOCOL}"
        - "traefik.frontend.rule=Host:${SOLR_TRAEFIK_HOST}"
        volumes:
            # Example of drupal solr core configuration. 6.x. Check image tag for correct config.
            - solr:${SOLR_CORES_PATH}:cached
            - solr-docker-sync:${SOLR_CORES_PATH}:nocopy
        entrypoint:
            - docker-entrypoint.sh
            - solr-precreate
            - ${SOLR_ENTRYPOINT_ARGUMENT}
        networks:
            internal: {}
            shared:
                aliases:
                - ${SOLR_SHARED_NETWORK_ALIAS}

################ Database images.
    mysql:
        image: mysql:${MYSQL_TAG}
        # build: docker/images/mysql/.
        volumes:
            - mysql:${MYSQL_LIB_PATH}:cached
            - mysql-docker-sync:${MYSQL_LIB_PATH}:nocopy
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
        networks:
            internal:
                aliases:
                - ${MYSQL_INTERNAL_NETWORK_ALIAS}

    postgres:
        image: postgres:${POSTGRES_TAG}
        restart: always
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_DB: ${POSTGRES_DB}
        volumes:
            - postgres:${POSTGRES_LIB_PATH}:cached
            - postgres-docker-sync:${POSTGRES_LIB_PATH}:nocopy
        networks:
            internal:
                aliases:
                - ${POSTGRES_INTERNAL_NETWORK_ALIAS}

    mongo:
        image: mongo:${MONGO_TAG}
        volumes:
            - mongo:${MONGO_LIB_PATH}:cached
            - mongo-docker-sync:${MONGO_LIB_PATH}:nocopy
        restart: always
        command: ${MONGO_COMMAND}
        networks:
            internal:
                aliases:
                - ${MONGO_INTERNAL_NETWORK_ALIAS}

################ DB managers.
    phpmyadmin:
        image: phpmyadmin/phpmyadmin:${PHPMYADMIN_TAG}
        labels:
        - "traefik.docker.network=${PROJECT_NAME}"
        - "traefik.enable=true"
        - "traefik.port=${PHPMYADMIN_TRAEFIK_PORT}"
        - "traefik.protocol=${PHPMYADMIN_TRAEFIK_PROTOCOL}"
        - "traefik.frontend.rule=Host:${PHPMYADMIN_TRAEFIK_HOST}"
        environment:
            PMA_HOST: ${PMA_HOST}
            PHP_UPLOAD_MAX_FILESIZE: ${PHP_UPLOAD_MAX_FILESIZE}
            PHP_MAX_INPUT_VARS: ${PHP_MAX_INPUT_VARS}
        networks:
            internal: {}
            shared:
                aliases:
                - ${PHPMYADMIN_SHARED_NETWORK_ALIAS}

    adminer:
        image: adminer:${ADMINER_TAG}
        labels:
        - "traefik.docker.network=${PROJECT_NAME}"
        - "traefik.enable=true"
        - "traefik.port=${ADMINER_TRAEFIK_PORT}"
        - "traefik.protocol=${ADMINER_TRAEFIK_PROTOCOL}"
        - "traefik.frontend.rule=Host:${ADMINER_TRAEFIK_HOST}"
        restart: always
        networks:
            internal: {}
            shared:
                aliases:
                - ${ADMINER_SHARED_NETWORK_ALIAS}

################ Cache images.
    redis:
        image: redis:${REDIS_TAG}
        networks:
            internal:
                aliases:
                - ${REDIS_INTERNAL_NETWORK_ALIAS}

    memcached:
        image: memcached:${MEMCACHED_TAG}
        networks:
            internal:
                aliases:
                - ${MEMCACHED_INTERNAL_NETWORK_ALIAS}

networks:
  internal:
    driver_opts:
      internal: "true"
    driver: bridge
  shared:
    driver: bridge

volumes:
    web:
        driver: local
        driver_opts:
            type: none
            device: $PWD/webroot
            o: bind
    solr:
        driver: local
        driver_opts:
            type: none
            device: $PWD/docker/runtime/solr
            o: bind
    mysql:
        driver: local
        driver_opts:
            type: none
            device: $PWD/docker/runtime/mysql
            o: bind
    postgres:
        driver: local
        driver_opts:
            type: none
            device: $PWD/docker/runtime/postgres/data
            o: bind
    mongo:
        driver: local
        driver_opts:
            type: none
            device: $PWD/docker/runtime/mongo
            o: bind
    web-docker-sync:
        name: "web-${PROJECT_NAME}-docker-sync"
        external: true
    solr-docker-sync:
        name: "solr-${PROJECT_NAME}-docker-sync"
        external: true
    mysql-docker-sync:
        name: "mysql-${PROJECT_NAME}-docker-sync"
        external: true
    postgres-docker-sync:
        name: "postgres-${PROJECT_NAME}-docker-sync"
        external: true
    mongo-docker-sync:
        name: "mongo-${PROJECT_NAME}-docker-sync"
        external: true
